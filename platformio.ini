[env]
extra_scripts =
    pre:pio/fix_include_paths.py
    post:pio/fix_system_includes.py
check_tool = cppcheck, clangtidy
check_flags =
    clangtidy: --config-file=.clang-tidy
    cppcheck: --suppressions-list=.cppcheck.suppress --inline-suppr

; Common flags
[flags]
warnings =
    -Wall
    -Wextra
    -Wpedantic
    -Werror
    -Wno-gnu-zero-variadic-macro-arguments
    -Wno-write-strings
    -Wno-subobject-linkage
    -Wno-parentheses

; Build modes
[build]
debug_flags =
    -DDEBUG
release_flags =
    -DNDEBUG
    -DRELEASE
    -felide-constructors
release_with_checks_flags =
    -DNDEBUG
    -DRELEASE
    -felide-constructors
    -DSUPP_FORCE_DASSERT

; Native platform
[env:native-base]
platform = ./platforms/clang
build_src_flags = ${flags.warnings}

[env:native-debug]
extends = env:native-base
build_type = debug
build_flags = ${build.debug_flags}

[env:native-release]
extends = env:native-base
build_type = release
build_flags = ${build.release_flags}

[env:native-release-with-checks]
extends = env:native-base
build_type = release
build_flags = ${build.release_with_checks_flags}

; AVR platform
[env:avr-base]
platform = atmelavr
framework = arduino
monitor_speed = 115200
monitor_echo = yes
platform_packages =
    ; modern avr-gcc toolchain
    toolchain-atmelavr@file:///opt/homebrew/opt/avr-gcc@14/
build_src_flags = ${flags.warnings}
build_unflags =
    -std=gnu++11
build_flags =
    -std=c++23
    -Wno-subobject-linkage
    ; modern avr-gcc toolchain
    --sysroot=/opt/homebrew/opt/avr-gcc@14/avr/
    -I/opt/homebrew/opt/avr-gcc@14/avr/include
    ; std:: support for avr
    -I../libs/stdlike/src
    ; other
    -DMONITOR_SPEED=${this.monitor_speed}
    -DLOGGING_ARDUINO_DEDUP_PSTR

; AVR/Arduino Nano
[env:nano-base]
extends = env:avr-base
board = nanoatmega328new

[env:nano-debug]
extends = env:nano-base
build_type = debug
build_flags =
    ${env:nano-base.build_flags}
    ${build.debug_flags}

[env:nano-release]
extends = env:nano-base
build_type = release
build_flags =
    ${env:nano-base.build_flags}
    ${build.release_flags}

[env:nano-release-with-checks]
extends = env:nano-base
build_type = release
build_flags =
    ${env:nano-base.build_flags}
    ${build.release_with_checks_flags}

; AVR/Arduino Micro
[env:micro-base]
extends = env:avr-base
board = micro
upload_protocol = avr109
board_upload.use_1200bps_touch = false
board_upload.wait_for_upload_port = false

[env:micro-debug]
extends = env:micro-base
build_type = debug
build_flags =
    ${env:micro-base.build_flags}
    ${build.debug_flags}

[env:micro-release]
extends = env:micro-base
build_type = release
build_flags =
    ${env:micro-base.build_flags}
    ${build.release_flags}

[env:micro-release-with-checks]
extends = env:micro-base
build_type = release
build_flags =
    ${env:micro-base.build_flags}
    ${build.release_with_checks_flags}

; ESP8266 platform
[env:esp8266-base]
platform = espressif8266
framework = arduino
build_src_flags = ${flags.warnings}
upload_speed = 921600
monitor_speed = 115200
monitor_echo = yes
monitor_filters = esp8266_exception_decoder, default
build_unflags =
    -std=gnu++17
build_flags =
    -std=c++20
    -DMONITOR_SPEED=${this.monitor_speed}
    -DLOGGING_ARDUINO_DEDUP_PSTR

; ESP8266/D1 Mini
[env:d1-base]
extends = env:esp8266-base
board = d1_mini
board_build.filesystem = littlefs
board_build.f_cpu = 160000000L

[env:d1-debug]
extends = env:d1-base
build_type = debug
build_flags =
    ${env:esp8266-base.build_flags}
    ${build.debug_flags}

[env:d1-release]
extends = env:d1-base
build_type = release
build_flags =
    ${env:esp8266-base.build_flags}
    ${build.release_flags}

[env:d1-release-with-checks]
extends = env:d1-base
build_type = release
build_flags =
    ${env:esp8266-base.build_flags}
    ${build.release_with_checks_flags}

; === End of infrastructure

[env:test-base]
test_build_src = yes
test_framework = unity

[env:test-native-debug]
;build_src_filter = +<../test/**>
extends = env:test-base, env:native-debug

[env:test-nano-debug]
extends = env:test-base, env:nano-debug
build_flags =
    ${env:arduino.build_flags}
    -I../stdlike/src

[env:micro_pro]
extends = env:test-base, env:micro-debug

[env:espressif8266]
extends = env:test-base, env:d1-debug

;[env:compdb-native]
;extends = env:native
;build_src_filter = +<../test/**>
;build_flags =
    ;${env:native.build_flags}
    ;-I./test/
    ;-I./src/
    ;-I./lib/supp/src
    ;-I./.pio/libdeps/native/Unity/src

;[env:compdb-nano]
;extends = env:nano
;build_src_filter = +<../test/**>
;build_flags =
    ;${env:nano.build_flags}
    ;-I./test/
    ;-I./src/
    ;-I./lib/supp/src
    ;-I./.pio/libdeps/nano/Unity/src

;[env:compdb-espressif8266]
;extends = env:espressif8266
;build_src_filter = +<../test/**>
;build_flags =
    ;${env:espressif8266.build_flags}
    ;-I./test/
    ;-I./src/
    ;-I./lib/supp/src
    ;-I./.pio/libdeps/espressif8266/Unity/src
